@page "/"
@page "/StkMS" 
@using Blazored.LocalStorage
@using StkMS.Contracts
@using StkMS.DomainModels
@using StkMS.ViewModels
@using BlazorBarcodeScanner.ZXing.JS

@inject ILocalStorageService localStorage

@inject IMapper mapper
@inject IStock stock
@inject IInventory inventory

<h1>Hello!</h1>

<p>Inventory status: @(inventory.State == InventoryState.None ? "Not " : "") Running.</p>
@if (inventory.StartedAt.HasValue)
{
    <p>Inventory started at @inventory.StartedAt.Value.ToString("G")</p>
}
@if (inventory.CompletedAt.HasValue)
{
    <p>Inventory completed at @inventory.CompletedAt.Value.ToString("G")</p>
}

<!-- V2 -->

<button class="btn btn-primary" disabled="@(inventory.State != InventoryState.None)" @onclick="BeginInventory">Begin the inventory</button>
<button class="btn btn-primary" disabled="@(inventory.State == InventoryState.None)" @onclick="CompleteInventory">Complete the inventory</button>

<hr/>
<div class="row">
    <div class="col-xs-12 col-sm-8 col-lg-4 col-xl-2">
        <EditForm Model="@stockViewModel" OnValidSubmit="@AddOrUpdateProduct">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="productCode">Product Code</label>
                <span id="productCode">@stockViewModel.Code</span>
            </div>

            <div class="form-group">
                <label for="productName">Product Name</label>
                <InputText id="productName" @bind-Value="stockViewModel.Name" class="form-control"/>
            </div>

            <div class="form-group">
                <label for="productUnit">Unit</label>
                <InputText id="productUnit" @bind-Value="stockViewModel.Unit" class="form-control"/>
            </div>

            <div class="form-group">
                <label for="productUnitPrice">Unit Price</label>
                <InputNumber id="productUnitPrice" @bind-Value="stockViewModel.UnitPrice" class="form-control"/>
            </div>

            <div class="form-group">
                <label for="productQuantity">Quantity</label>
                <InputNumber id="productQuantity" @bind-Value="stockViewModel.Quantity" class="form-control"/>
            </div>

            <div class="text-right">
                <button type="submit" class="btn btn-primary">Add/Update</button>
            </div>
        </EditForm>
    </div>
</div>

<hr/>
<BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title="Scan Barcode from Camera"

                                             StartCameraAutomatically="true"
                                             ShowStart="false"
                                             ShowReset="false"
                                             ShowVideoDeviceList="true"
                                             VideoWidth="300"
                                             VideoHeigth="200"/>

<hr/>
<div>
    <p>
        <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
            Show/Hide Inventory
        </button>
    </p>
    <div class="collapse" id="collapseExample">
        <div class="col-12">
            <div>
                <table class="table">
                    <thead>
                    <tr class="row">
                        <th class="col-2 text-left">Code</th>
                        <th class="col-3 text-left">Name</th>
                        <th class="col-2 text-center">Unit</th>
                        <th class="col-2 text-center">Unit Price</th>
                        <th class="col-2 text-center">Quantity</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var record in stock.GetAll())
                    {
                        <tr class="row">
                            <td class="col-2 text-left">@record.Product.Code</td>
                            <td class="col-3 text-left">@record.Product.Name</td>
                            <td class="col-2 text-center">@record.Product.Unit</td>
                            <td class="col-2 text-right">@record.Product.UnitPrice.ToString("N")</td>
                            <td class="col-2 text-right">@record.Quantity.ToString("N")</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code
{
    private StockViewModel stockViewModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);

        JsInteropClass.BarcodeReceived += LocalReceivedBarcodeText;

        ProductScanned("1235");
    }

    private void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        ProductScanned(args.BarcodeText);
        StateHasChanged();
    }

    private void BeginInventory()
    {
        inventory.Begin();
    }

    private void CompleteInventory()
    {
        inventory.Complete();
    }

    private void ProductScanned(string productCode)
    {
        var product = stock.FindProduct(productCode);
        stockViewModel = product == null ? new StockViewModel { Code = productCode } : mapper.MapToViewModel(product);
    }

    private void AddOrUpdateProduct()
    {
        var product = mapper.MapToDomain(stockViewModel!);
        stock.AddOrUpdate(product);
    }
}